{
  "schemaVersion": 1,
  "packId": "pack.basics",
  "packName": "Digital Logic – Basics",
  "packDescription": "",
  "chapters": [
    {
      "chapterId": "ch.basics",
      "chapterName": "Basics",
      "chapterDescription": "Master the building blocks of digital electronics! Learn how simple gates like AND, OR, and XOR form the foundation of all computer logic. By combining these basic gates, you'll create increasingly powerful circuits that perform complex operations.",
      "levels": [
        {
          "id": "lvl.not.1",
          "chapterId": "ch.basics",
          "name": "NOT Gate",
          "description": "Output should be the inverse of input.",
          "inputCount": 1,
          "outputCount": 1,
          "inputLabels": [
            "A"
          ],
          "outputLabels": [
            "Y"
          ],
          "testVectors": [
            {
              "inputs": "0",
              "expected": "1"
            },
            {
              "inputs": "1",
              "expected": "0"
            }
          ],
          "hints": []
        },
        {
          "id": "lvl.and.1",
          "chapterId": "ch.basics",
          "name": "AND Gate",
          "description": "Output should be 1 only if both inputs are 1.",
          "inputCount": 2,
          "outputCount": 1,
          "inputLabels": [
            "B",
            "A"
          ],
          "outputLabels": [
            "Y"
          ],
          "testVectors": [
            {
              "inputs": "00",
              "expected": "0"
            },
            {
              "inputs": "01",
              "expected": "0"
            },
            {
              "inputs": "10",
              "expected": "0"
            },
            {
              "inputs": "11",
              "expected": "1"
            }
          ],
          "hints": []
        },
        {
          "id": "lvl.or.1",
          "chapterId": "ch.basics",
          "name": "OR Gate",
          "description": "Output should be 1 if either input is 1.",
          "inputCount": 2,
          "outputCount": 1,
          "inputLabels": [
            "B",
            "A"
          ],
          "outputLabels": [
            "Y"
          ],
          "testVectors": [
            {
              "inputs": "00",
              "expected": "0"
            },
            {
              "inputs": "01",
              "expected": "1"
            },
            {
              "inputs": "10",
              "expected": "1"
            },
            {
              "inputs": "11",
              "expected": "1"
            }
          ],
          "hints": []
        },
        {
          "id": "lvl.xor.1",
          "chapterId": "ch.basics",
          "name": "XOR Gate",
          "description": "Output should be 1 if exactly one input is 1.",
          "inputCount": 2,
          "outputCount": 1,
          "inputLabels": [
            "B",
            "A"
          ],
          "outputLabels": [
            "Y"
          ],
          "testVectors": [
            {
              "inputs": "00",
              "expected": "0"
            },
            {
              "inputs": "01",
              "expected": "1"
            },
            {
              "inputs": "10",
              "expected": "1"
            },
            {
              "inputs": "11",
              "expected": "0"
            }
          ],
          "hints": []
        },
        {
          "id": "lvl.nor.1",
          "chapterId": "ch.basics",
          "name": "NOR Gate",
          "description": "Output is 1 only when both inputs are 0.",
          "inputCount": 2,
          "outputCount": 1,
          "inputLabels": [
            "B",
            "A"
          ],
          "outputLabels": [
            "Y"
          ],
          "testVectors": [
            {
              "inputs": "00",
              "expected": "1"
            },
            {
              "inputs": "01",
              "expected": "0"
            },
            {
              "inputs": "10",
              "expected": "0"
            },
            {
              "inputs": "11",
              "expected": "0"
            }
          ],
          "hints": [
            "NOR is NOT OR",
            "Y = NOT (A OR B)"
          ]
        },
        {
          "id": "lvl.xnor.1",
          "chapterId": "ch.basics",
          "name": "XNOR Gate",
          "description": "Output is 1 when inputs are equal.",
          "inputCount": 2,
          "outputCount": 1,
          "inputLabels": [
            "B",
            "A"
          ],
          "outputLabels": [
            "Y"
          ],
          "testVectors": [
            {
              "inputs": "00",
              "expected": "1"
            },
            {
              "inputs": "01",
              "expected": "0"
            },
            {
              "inputs": "10",
              "expected": "0"
            },
            {
              "inputs": "11",
              "expected": "1"
            }
          ],
          "hints": []
        }
      ]
    },
    {
      "chapterId": "ch.intermediate",
      "chapterName": "Intermediate",
      "chapterDescription": "Building upon basic logic gates, these challenges introduce more complex combinational circuits, multi-input functions, and fundamental functional blocks. Master the art of combining simple gates to create sophisticated logic operations.",
      "levels": [
        {
          "id": "lvl.a_and_not_b",
          "chapterId": "ch.intermediate",
          "name": "A AND NOT B",
          "description": "Output should be 1 when A=1 and B=0.",
          "inputCount": 2,
          "outputCount": 1,
          "inputLabels": [
            "B",
            "A"
          ],
          "outputLabels": [
            "Y"
          ],
          "testVectors": [
            {
              "inputs": "00",
              "expected": "0"
            },
            {
              "inputs": "10",
              "expected": "1"
            },
            {
              "inputs": "01",
              "expected": "0"
            },
            {
              "inputs": "11",
              "expected": "0"
            }
          ],
          "hints": []
        },
        {
          "id": "lvl.a_or_not_b",
          "chapterId": "ch.intermediate",
          "name": "A OR NOT B",
          "description": "Output should be 1 when A=1 or B=0 (or both).",
          "inputCount": 2,
          "outputCount": 1,
          "inputLabels": [
            "B",
            "A"
          ],
          "outputLabels": [
            "Y"
          ],
          "testVectors": [
            {
              "inputs": "00",
              "expected": "1"
            },
            {
              "inputs": "10",
              "expected": "1"
            },
            {
              "inputs": "01",
              "expected": "0"
            },
            {
              "inputs": "11",
              "expected": "1"
            }
          ],
          "hints": []
        },
        {
          "id": "lvl.impl.1",
          "chapterId": "ch.intermediate",
          "name": "Implication (A → B)",
          "description": "(!A) OR B.",
          "inputCount": 2,
          "outputCount": 1,
          "inputLabels": [
            "B",
            "A"
          ],
          "outputLabels": [
            "Y"
          ],
          "testVectors": [
            {
              "inputs": "00",
              "expected": "1"
            },
            {
              "inputs": "01",
              "expected": "1"
            },
            {
              "inputs": "10",
              "expected": "0"
            },
            {
              "inputs": "11",
              "expected": "1"
            }
          ],
          "hints": []
        },
        {
          "id": "lvl.and3.1",
          "chapterId": "ch.intermediate",
          "name": "3-Input AND",
          "description": "Output is 1 only when A=B=C=1.",
          "inputCount": 3,
          "outputCount": 1,
          "inputLabels": [
            "C",
            "B",
            "A"
          ],
          "outputLabels": [
            "Y"
          ],
          "testVectors": [
            {
              "inputs": "000",
              "expected": "0"
            },
            {
              "inputs": "001",
              "expected": "0"
            },
            {
              "inputs": "010",
              "expected": "0"
            },
            {
              "inputs": "011",
              "expected": "0"
            },
            {
              "inputs": "100",
              "expected": "0"
            },
            {
              "inputs": "101",
              "expected": "0"
            },
            {
              "inputs": "110",
              "expected": "0"
            },
            {
              "inputs": "111",
              "expected": "1"
            }
          ],
          "hints": []
        },
        {
          "id": "lvl.or3.1",
          "chapterId": "ch.intermediate",
          "name": "3-Input OR",
          "description": "Output is 1 if any input is 1.",
          "inputCount": 3,
          "outputCount": 1,
          "inputLabels": [
            "C",
            "B",
            "A"
          ],
          "outputLabels": [
            "Y"
          ],
          "testVectors": [
            {
              "inputs": "000",
              "expected": "0"
            },
            {
              "inputs": "001",
              "expected": "1"
            },
            {
              "inputs": "010",
              "expected": "1"
            },
            {
              "inputs": "011",
              "expected": "1"
            },
            {
              "inputs": "100",
              "expected": "1"
            },
            {
              "inputs": "101",
              "expected": "1"
            },
            {
              "inputs": "110",
              "expected": "1"
            },
            {
              "inputs": "111",
              "expected": "1"
            }
          ],
          "hints": []
        },
        {
          "id": "lvl.maj3.1",
          "chapterId": "ch.intermediate",
          "name": "Majority",
          "description": "Output is 1 when at least two inputs are 1.",
          "inputCount": 3,
          "outputCount": 1,
          "inputLabels": [
            "C",
            "B",
            "A"
          ],
          "outputLabels": [
            "Y"
          ],
          "testVectors": [
            {
              "inputs": "000",
              "expected": "0"
            },
            {
              "inputs": "001",
              "expected": "0"
            },
            {
              "inputs": "010",
              "expected": "0"
            },
            {
              "inputs": "011",
              "expected": "1"
            },
            {
              "inputs": "100",
              "expected": "0"
            },
            {
              "inputs": "101",
              "expected": "1"
            },
            {
              "inputs": "110",
              "expected": "1"
            },
            {
              "inputs": "111",
              "expected": "1"
            }
          ],
          "hints": []
        },
        {
          "id": "lvl.par3.1",
          "chapterId": "ch.intermediate",
          "name": "Parity (Odd, 3-bit)",
          "description": "Output is 1 when the number of 1s is odd.",
          "inputCount": 3,
          "outputCount": 1,
          "inputLabels": [
            "C",
            "B",
            "A"
          ],
          "outputLabels": [
            "Y"
          ],
          "testVectors": [
            {
              "inputs": "000",
              "expected": "0"
            },
            {
              "inputs": "001",
              "expected": "1"
            },
            {
              "inputs": "010",
              "expected": "1"
            },
            {
              "inputs": "011",
              "expected": "0"
            },
            {
              "inputs": "100",
              "expected": "1"
            },
            {
              "inputs": "101",
              "expected": "0"
            },
            {
              "inputs": "110",
              "expected": "0"
            },
            {
              "inputs": "111",
              "expected": "1"
            }
          ],
          "hints": []
        },
        {
          "id": "lvl.atleast1zero",
          "chapterId": "ch.intermediate",
          "name": "At Least One Zero",
          "description": "Output is 1 unless both inputs are 1.",
          "inputCount": 2,
          "outputCount": 1,
          "inputLabels": [
            "B",
            "A"
          ],
          "outputLabels": [
            "Y"
          ],
          "testVectors": [
            {
              "inputs": "00",
              "expected": "1"
            },
            {
              "inputs": "01",
              "expected": "1"
            },
            {
              "inputs": "10",
              "expected": "1"
            },
            {
              "inputs": "11",
              "expected": "0"
            }
          ],
          "hints": []
        },
        {
          "id": "lvl.mux2.1",
          "chapterId": "ch.intermediate",
          "name": "2→1 MUX (S,A,B)",
          "description": "If S=0 output A; if S=1 output B.",
          "inputCount": 3,
          "outputCount": 1,
          "inputLabels": [
            "B",
            "S",
            "A"
          ],
          "outputLabels": [
            "Y"
          ],
          "testVectors": [
            {
              "inputs": "000",
              "expected": "0"
            },
            {
              "inputs": "100",
              "expected": "1"
            },
            {
              "inputs": "010",
              "expected": "0"
            },
            {
              "inputs": "110",
              "expected": "0"
            },
            {
              "inputs": "001",
              "expected": "0"
            },
            {
              "inputs": "101",
              "expected": "1"
            },
            {
              "inputs": "011",
              "expected": "1"
            },
            {
              "inputs": "111",
              "expected": "1"
            }
          ],
          "hints": []
        }
      ]
    },
    {
      "chapterId": "ch.sequential",
      "chapterName": "Sequential Circuits",
      "chapterDescription": "Enter the world of memory and time! Build circuits that remember their past and create counters, latches, and flip-flops. This is where digital circuits gain the power of memory and state.",
      "levels": [
      
        {
          "id": "lvl.srlatch.1",
          "chapterId": "ch.sequential",
          "name": "SR Latch",
          "description": "Basic memory element. Set when S=1, Reset when R=1, Hold when both are 0.",
          "inputCount": 2,
          "outputCount": 2,
          "inputLabels": [
            "R",
            "S"
          ],
          "outputLabels": [
            "Q",
            "Qn"
          ],
          "isSequential": true,
          "settleStepsPerVector": 2,
          "testSequences": [
            {
              "name": "Set and Reset",
              "vectors": [
                {
                  "inputs": "01",
                  "expected": "10",
                  "settleSteps": 3,
                  "isClockEdge": false
                },
                {
                  "inputs": "00",
                  "expected": "10",
                  "settleSteps": 2,
                  "isClockEdge": false
                },
                {
                  "inputs": "10",
                  "expected": "01",
                  "settleSteps": 2,
                  "isClockEdge": false
                },
                {
                  "inputs": "00",
                  "expected": "01",
                  "settleSteps": 2,
                  "isClockEdge": false
                },
                {
                  "inputs": "01",
                  "expected": "10",
                  "settleSteps": 2,
                  "isClockEdge": false
                },
                {
                  "inputs": "00",
                  "expected": "10",
                  "settleSteps": 2,
                  "isClockEdge": false
                }
              ]
            }
          ],
          "hints": [
            "Use NAND gates",
            "Q = NOT (R AND Qn)",
            "Qn = NOT (S AND Q)"
          ]
        },
        {
          "id": "lvl.dlatch.1",
          "chapterId": "ch.sequential",
          "name": "D Latch",
          "description": "Level-triggered memory element. When Enable=1, Q follows D. When Enable=0, Q holds its value (latched).",
          "inputCount": 2,
          "outputCount": 2,
          "inputLabels": [
            "D",
            "Enable"
          ],
          "outputLabels": [
            "Q",
            "Q'"
          ],
          "isSequential": true,
          "settleStepsPerVector": 2,
          "testSequences": [
            {
              "name": "Transparent and Latched Modes",
              "setup" : [
                "00",
                "10",
                "00"
              ],
              "vectors": [
                {
                  "inputs": "01",
                  "expected": "10",
                  "settleSteps": 2,
                  "isClockEdge": false
                },
                {
                  "inputs": "00",
                  "expected": "10",
                  "settleSteps": 2,
                  "isClockEdge": false
                },
                {
                  "inputs": "10",
                  "expected": "10",
                  "settleSteps": 2,
                  "isClockEdge": false
                },
                {
                  "inputs": "11",
                  "expected": "01",
                  "settleSteps": 2,
                  "isClockEdge": false
                },
                {
                  "inputs": "01",
                  "expected": "01",
                  "settleSteps": 2,
                  "isClockEdge": false
                },
                {
                  "inputs": "00",
                  "expected": "01",
                  "settleSteps": 2,
                  "isClockEdge": false
                },
                {
                  "inputs": "10",
                  "expected": "10",
                  "settleSteps": 2,
                  "isClockEdge": false
                }
              ]
            }
          ],
          "hints": [
            "D Latch is level-triggered, not edge-triggered",
            "When Enable=1: Q becomes D immediately (transparent mode)",
            "When Enable=0: Q holds its current value (latch mode)",
            "Can be built using NAND gates or an SR Latch with D and NOT D inputs",
            "Q' is always the complement of Q"
          ]
        },
        {
          "id": "lvl.dflipflop.1",
          "chapterId": "ch.sequential",
          "name": "D Flip-Flop",
          "description": "Data storage element. Q follows D on rising clock edge. Q' is the complement of Q. When CLK goes high, Q captures the value of D and holds it until the next rising edge.",
          "inputCount": 2,
          "outputCount": 2,
          "inputLabels": [
            "D",
            "CLK"
          ],
          "outputLabels": [
            "Q",
            "Q'"
          ],
          "isSequential": true,
          "clockInputIndex": 1,
          "settleStepsPerVector": 3,
          "testSequences": [
            {
              "name": "Data Storage and Complement",
              "setup" : [
                "00",
                "10",
                "00"
              ],
              "vectors": [
                {
                  "inputs": "10",
                  "expected": "10",
                  "settleSteps": 10,
                  "isClockEdge": true
                },
                {
                  "inputs": "11",
                  "expected": "10",
                  "settleSteps": 10,
                  "isClockEdge": false
                },
                {
                  "inputs": "01",
                  "expected": "10",
                  "settleSteps": 10,
                  "isClockEdge": false
                },
                {
                  "inputs": "11",
                  "expected": "01",
                  "settleSteps": 10,
                  "isClockEdge": true
                },
                {
                  "inputs": "00",
                  "expected": "01",
                  "settleSteps": 10,
                  "isClockEdge": false
                },
                {
                  "inputs": "10",
                  "expected": "10",
                  "settleSteps": 10,
                  "isClockEdge": true
                },
                {
                  "inputs": "00",
                  "expected": "10",
                  "settleSteps": 10,
                  "isClockEdge": false
                },
                {
                  "inputs": "01",
                  "expected": "10",
                  "settleSteps": 10,
                  "isClockEdge": false
                },
                {
                  "inputs": "11",
                  "expected": "01",
                  "settleSteps": 10,
                  "isClockEdge": true
                }
              ]
            }
          ],
          "hints": [
            "D flip-flop stores the D input on rising clock edge",
            "Q changes only when CLK transitions from 0 to 1",
            "Q' (Q complement) is always the opposite of Q",
            "Characteristic equation: Q(n+1) = D(n)"
          ]
        }
      ]
    },
    {
      "chapterId": "ch.arithmetic",
      "chapterName": "Arithmetic Fundamentals",
      "chapterDescription": "Learn the magic of binary math! Construct adders from simple gates, understand carry propagation, and build the mathematical foundation that powers every computer's arithmetic unit.",
      "levels": [
        {
          "id": "lvl.halfadder.1",
          "chapterId": "ch.arithmetic",
          "name": "Half Adder",
          "description": "Add two single bits. Output is sum and carry.",
          "inputCount": 2,
          "outputCount": 2,
          "inputLabels": [
            "B",
            "A"
          ],
          "outputLabels": [
            "Sum",
            "Carry"
          ],
          "testVectors": [
            {
              "inputs": "00",
              "expected": "00"
            },
            {
              "inputs": "01",
              "expected": "01"
            },
            {
              "inputs": "10",
              "expected": "01"
            },
            {
              "inputs": "11",
              "expected": "10"
            }
          ],
          "hints": [
            "Sum = A XOR B",
            "Carry = A AND B"
          ]
        },
        {
          "id": "lvl.fulladder.1",
          "chapterId": "ch.arithmetic",
          "name": "Full Adder",
          "description": "Add two bits plus carry-in. Output is sum and carry-out.",
          "inputCount": 3,
          "outputCount": 2,
          "inputLabels": [
            "Cin",
            "B",
            "A"
          ],
          "outputLabels": [
            "Sum",
            "Cout"
          ],
          "testVectors": [
            {
              "inputs": "000",
              "expected": "00"
            },
            {
              "inputs": "001",
              "expected": "01"
            },
            {
              "inputs": "010",
              "expected": "01"
            },
            {
              "inputs": "011",
              "expected": "10"
            },
            {
              "inputs": "100",
              "expected": "01"
            },
            {
              "inputs": "101",
              "expected": "10"
            },
            {
              "inputs": "110",
              "expected": "10"
            },
            {
              "inputs": "111",
              "expected": "11"
            }
          ],
          "hints": [
            "Use two half adders",
            "Sum = A XOR B XOR Cin",
            "Cout = (A AND B) OR (Cin AND (A XOR B))"
          ]
        },
        {
          "id": "lvl.adder4bit.1",
          "chapterId": "ch.arithmetic",
          "name": "4-bit Adder",
          "description": "Add two 4-bit numbers. Output is 5-bit result (4-bit sum + carry).",
          "inputCount": 8,
          "outputCount": 5,
          "inputLabels": [
            "B3",
            "B2",
            "B1",
            "B0",
            "A3",
            "A2",
            "A1",
            "A0"
          ],
          "outputLabels": [
            "Sum3",
            "Sum2",
            "Sum1",
            "Sum0",
            "Carry"
          ],
          "testVectors": [
            {
              "inputs": "00000000",
              "expected": "00000"
            },
            {
              "inputs": "00000001",
              "expected": "00001"
            },
            {
              "inputs": "00010001",
              "expected": "00010"
            },
            {
              "inputs": "00110011",
              "expected": "00110"
            },
            {
              "inputs": "01010101",
              "expected": "01010"
            },
            {
              "inputs": "01110111",
              "expected": "01110"
            },
            {
              "inputs": "10011001",
              "expected": "10010"
            },
            {
              "inputs": "11111111",
              "expected": "11110"
            },
            {
              "inputs": "00001111",
              "expected": "01111"
            },
            {
              "inputs": "11110000",
              "expected": "01111"
            },
            {
              "inputs": "00011111",
              "expected": "10000"
            },
            {
              "inputs": "11110001",
              "expected": "10000"
            }
          ],
          "hints": [
            "Chain four full adders",
            "Carry propagates through all stages",
            "Test with edge cases: 0+0, max+1, overflow"
          ]
        }
      ]
    },
    {
      "chapterId": "ch.advanced_arithmetic",
      "chapterName": "Advanced Arithmetic",
      "chapterDescription": "Reach the pinnacle of digital design! Build subtraction circuits using two's complement, create comparators, and finally construct a complete ALU - the heart of every processor that performs all arithmetic and logic operations.",
      "levels": [
        {
          "id": "lvl.subtractor.1",
          "chapterId": "ch.advanced_arithmetic",
          "name": "4-bit Subtractor",
          "description": "Subtract B from A using two's complement. Output is difference and borrow.",
          "inputCount": 8,
          "outputCount": 5,
          "inputLabels": [
            "A3",
            "A2",
            "A1",
            "A0",
            "B3",
            "B2",
            "B1",
            "B0"
          ],
          "outputLabels": [
            "Diff3",
            "Diff2",
            "Diff1",
            "Diff0",
            "Borrow"
          ],
          "testVectors": [
            {
              "inputs": "00000000",
              "expected": "00000"
            },
            {
              "inputs": "00010000",
              "expected": "00001"
            },
            {
              "inputs": "00100000",
              "expected": "00010"
            },
            {
              "inputs": "00110000",
              "expected": "00011"
            },
            {
              "inputs": "00010001",
              "expected": "00000"
            },
            {
              "inputs": "00100001",
              "expected": "00001"
            },
            {
              "inputs": "00100010",
              "expected": "00000"
            },
            {
              "inputs": "00110011",
              "expected": "00000"
            },
            {
              "inputs": "01000100",
              "expected": "00000"
            },
            {
              "inputs": "01010101",
              "expected": "00000"
            },
            {
              "inputs": "01100110",
              "expected": "00000"
            },
            {
              "inputs": "01110111",
              "expected": "00000"
            },
            {
              "inputs": "10001000",
              "expected": "00000"
            },
            {
              "inputs": "10011001",
              "expected": "00000"
            },
            {
              "inputs": "10101010",
              "expected": "00000"
            },
            {
              "inputs": "10111011",
              "expected": "00000"
            },
            {
              "inputs": "11001100",
              "expected": "00000"
            },
            {
              "inputs": "11011101",
              "expected": "00000"
            },
            {
              "inputs": "11101110",
              "expected": "00000"
            },
            {
              "inputs": "11111111",
              "expected": "00000"
            },
            {
              "inputs": "11110001",
              "expected": "01110"
            },
            {
              "inputs": "10000010",
              "expected": "00110"
            },
            {
              "inputs": "00110101",
              "expected": "11110"
            },
            {
              "inputs": "00001111",
              "expected": "10001"
            },
            {
              "inputs": "11111000",
              "expected": "00111"
            },
            {
              "inputs": "11110000",
              "expected": "01111"
            }
          ],
          "hints": [
            "Use two's complement: A - B = A + (~B + 1)",
            "Invert B, add 1, then use 4-bit adder",
            "Borrow indicates negative result"
          ]
        },
        {
          "id": "lvl.comparator.1",
          "chapterId": "ch.advanced_arithmetic",
          "name": "4-bit Comparator",
          "description": "Compare two 4-bit numbers. Output A>B, A=B, A<B.",
          "inputCount": 8,
          "outputCount": 3,
          "inputLabels": [
            "B3",
            "B2",
            "B1",
            "B0",
            "A3",
            "A2",
            "A1",
            "A0"
          ],
          "outputLabels": [
            "A > B",
            "A = B",
            "A < B"
          ],
          "testVectors": [
            {
              "inputs": "00000000",
              "expected": "010"
            },
            {
              "inputs": "00000001",
              "expected": "100"
            },
            {
              "inputs": "00000010",
              "expected": "100"
            },
            {
              "inputs": "00000011",
              "expected": "100"
            },
            {
              "inputs": "00010001",
              "expected": "010"
            },
            {
              "inputs": "00010010",
              "expected": "100"
            },
            {
              "inputs": "00010011",
              "expected": "100"
            },
            {
              "inputs": "00100010",
              "expected": "010"
            },
            {
              "inputs": "00100011",
              "expected": "100"
            },
            {
              "inputs": "00110011",
              "expected": "010"
            },
            {
              "inputs": "01000100",
              "expected": "010"
            },
            {
              "inputs": "01010101",
              "expected": "010"
            },
            {
              "inputs": "01100110",
              "expected": "010"
            },
            {
              "inputs": "01110111",
              "expected": "010"
            },
            {
              "inputs": "10001000",
              "expected": "010"
            },
            {
              "inputs": "10011001",
              "expected": "010"
            },
            {
              "inputs": "10101010",
              "expected": "010"
            },
            {
              "inputs": "10111011",
              "expected": "010"
            },
            {
              "inputs": "11001100",
              "expected": "010"
            },
            {
              "inputs": "11011101",
              "expected": "010"
            },
            {
              "inputs": "11101110",
              "expected": "010"
            },
            {
              "inputs": "11101110",
              "expected": "010"
            },
            {
              "inputs": "11000011",
              "expected": "001"
            },
            {
              "inputs": "11110011",
              "expected": "001"
            }
          ],
          "hints": [
            "A = B when all bits match",
            "A > B when MSB differs and A_MSB=1, or MSB same and A > B in lower bits",
            "A < B when neither A > B nor A = B",
            "Compare bits from most significant to least significant"
          ]
        },
        {
          "id": "lvl.alu_simple.1",
          "chapterId": "ch.advanced_arithmetic",
          "name": "Simple ALU (Add/Sub)",
          "description": "4-bit ALU with add/subtract operations. Op=0: add, Op=1: subtract.",
          "inputCount": 9,
          "outputCount": 5,
          "inputLabels": [
            "Op",
            "B3",
            "B2",
            "B1",
            "B0",
            "A3",
            "A2",
            "A1",
            "A0"
          ],
          "outputLabels": [
            "Result3",
            "Result2",
            "Result1",
            "Result0",
            "Carry/Borrow"
          ],
          "testVectors": [
            {
              "inputs": "000000000",
              "expected": "00000"
            },
            {
              "inputs": "000100000",
              "expected": "00001"
            },
            {
              "inputs": "001000000",
              "expected": "00010"
            },
            {
              "inputs": "001100000",
              "expected": "00011"
            },
            {
              "inputs": "000100010",
              "expected": "00010"
            },
            {
              "inputs": "001000010",
              "expected": "00011"
            },
            {
              "inputs": "001100010",
              "expected": "00100"
            },
            {
              "inputs": "001001000",
              "expected": "00110"
            },
            {
              "inputs": "001101000",
              "expected": "00111"
            },
            {
              "inputs": "001101100",
              "expected": "01001"
            },
            {
              "inputs": "100000010",
              "expected": "01001"
            },
            {
              "inputs": "101010100",
              "expected": "10100"
            },
            {
              "inputs": "110011000",
              "expected": "11000"
            },
            {
              "inputs": "111011100",
              "expected": "11100"
            },
            {
              "inputs": "000100001",
              "expected": "00001"
            },
            {
              "inputs": "001000001",
              "expected": "00010"
            },
            {
              "inputs": "001100001",
              "expected": "00011"
            },
            {
              "inputs": "000100011",
              "expected": "00000"
            },
            {
              "inputs": "001000011",
              "expected": "00001"
            },
            {
              "inputs": "001100011",
              "expected": "00010"
            },
            {
              "inputs": "001001001",
              "expected": "11110"
            },
            {
              "inputs": "001101001",
              "expected": "11111"
            },
            {
              "inputs": "001101101",
              "expected": "11101"
            },
            {
              "inputs": "100000011",
              "expected": "00111"
            },
            {
              "inputs": "101010101",
              "expected": "00000"
            },
            {
              "inputs": "110011001",
              "expected": "00000"
            },
            {
              "inputs": "111011101",
              "expected": "00000"
            }
          ],
          "hints": [
            "Use MUX to select between adder and subtractor",
            "When Op=0: A + B",
            "When Op=1: A - B (two's complement)"
          ]
        },
        {
          "id": "lvl.alu_complete.1",
          "chapterId": "ch.advanced_arithmetic",
          "name": "Complete 4-bit ALU",
          "description": "Full ALU with 4 operations: AND, OR, ADD, SUB. 2-bit operation select.",
          "inputCount": 10,
          "outputCount": 5,
          "inputLabels": [
            "Op1",
            "Op0",
            "B3",
            "B2",
            "B1",
            "B0",
            "A3",
            "A2",
            "A1",
            "A0"
          ],
          "outputLabels": [
            "Result3",
            "Result2",
            "Result1",
            "Result0",
            "Flag"
          ],
          "testVectors": [
    {
        "inputs":  "0000000000",
        "expected":  "00000"
    },
    {
        "inputs":  "0000000001",
        "expected":  "00000"
    },
    {
        "inputs":  "0000000010",
        "expected":  "00000"
    },
    {
        "inputs":  "0000000011",
        "expected":  "00000"
    },
    {
        "inputs":  "0000000100",
        "expected":  "00001"
    },
    {
        "inputs":  "0000000101",
        "expected":  "10000"
    },
    {
        "inputs":  "0000000110",
        "expected":  "00001"
    },
    {
        "inputs":  "0000000111",
        "expected":  "11111"
    },
    {
        "inputs":  "0000001000",
        "expected":  "00010"
    },
    {
        "inputs":  "0000001001",
        "expected":  "10000"
    },
    {
        "inputs":  "0000001010",
        "expected":  "00010"
    },
    {
        "inputs":  "0000001011",
        "expected":  "11110"
    },
    {
        "inputs":  "0000001100",
        "expected":  "00011"
    },
    {
        "inputs":  "0000001101",
        "expected":  "10000"
    },
    {
        "inputs":  "0000001110",
        "expected":  "00011"
    },
    {
        "inputs":  "0000001111",
        "expected":  "11101"
    },
    {
        "inputs":  "0000011011",
        "expected":  "11010"
    },
    {
        "inputs":  "0000011100",
        "expected":  "00111"
    },
    {
        "inputs":  "0000011101",
        "expected":  "10000"
    },
    {
        "inputs":  "0000011110",
        "expected":  "00111"
    },
    {
        "inputs":  "0000011111",
        "expected":  "11001"
    },
    {
        "inputs":  "0000100000",
        "expected":  "01000"
    },
    {
        "inputs":  "0000100001",
        "expected":  "10000"
    },
    {
        "inputs":  "0000100010",
        "expected":  "01000"
    },
    {
        "inputs":  "0000100011",
        "expected":  "11000"
    },
    {
        "inputs":  "0000100100",
        "expected":  "01001"
    },
    {
        "inputs":  "0000100101",
        "expected":  "10000"
    },
    {
        "inputs":  "0000100110",
        "expected":  "01001"
    },
    {
        "inputs":  "0000100111",
        "expected":  "10111"
    },
    {
        "inputs":  "0000101000",
        "expected":  "01010"
    },
    {
        "inputs":  "0000101001",
        "expected":  "10000"
    },
    {
        "inputs":  "0000101010",
        "expected":  "01010"
    },
    {
        "inputs":  "0000101011",
        "expected":  "10110"
    },
    {
        "inputs":  "0000101100",
        "expected":  "01011"
    },
    {
        "inputs":  "0000101101",
        "expected":  "10000"
    },
    {
        "inputs":  "0000101110",
        "expected":  "01011"
    },
    {
        "inputs":  "0000101111",
        "expected":  "10101"
    },
    {
        "inputs":  "0000110000",
        "expected":  "01100"
    },
    {
        "inputs":  "0000110001",
        "expected":  "10000"
    },
    {
        "inputs":  "0000110010",
        "expected":  "01100"
    },
    {
        "inputs":  "0000110011",
        "expected":  "10100"
    },
    {
        "inputs":  "0000110100",
        "expected":  "01101"
    },
    {
        "inputs":  "0000110101",
        "expected":  "10000"
    },
    {
        "inputs":  "0000110110",
        "expected":  "01101"
    },
    {
        "inputs":  "0000110111",
        "expected":  "10011"
    },
    {
        "inputs":  "0000111000",
        "expected":  "01110"
    },
    {
        "inputs":  "0000111001",
        "expected":  "10000"
    },
    {
        "inputs":  "0000111010",
        "expected":  "01110"
    },
    {
        "inputs":  "0000111011",
        "expected":  "10010"
    },
    {
        "inputs":  "0000111100",
        "expected":  "01111"
    },
    {
        "inputs":  "0000111101",
        "expected":  "10000"
    },
    {
        "inputs":  "0000111110",
        "expected":  "01111"
    },
    {
        "inputs":  "0000111111",
        "expected":  "10001"
    },
    {
        "inputs":  "0001000000",
        "expected":  "00001"
    },
    {
        "inputs":  "0001000001",
        "expected":  "00000"
    },
    {
        "inputs":  "0001000010",
        "expected":  "00001"
    },
    {
        "inputs":  "0001000011",
        "expected":  "00001"
    },
    {
        "inputs":  "0001000100",
        "expected":  "00001"
    },
    {
        "inputs":  "0001000101",
        "expected":  "00001"
    },
    {
        "inputs":  "0001000110",
        "expected":  "00010"
    },
    {
        "inputs":  "0001011000",
        "expected":  "00111"
    },
    {
        "inputs":  "0001011001",
        "expected":  "10000"
    },
    {
        "inputs":  "0001011010",
        "expected":  "00111"
    },
    {
        "inputs":  "0001011011",
        "expected":  "11011"
    },
    {
        "inputs":  "0001011100",
        "expected":  "00111"
    },
    {
        "inputs":  "0001011101",
        "expected":  "10001"
    },
    {
        "inputs":  "0001011110",
        "expected":  "01000"
    },
    {
        "inputs":  "0001011111",
        "expected":  "11010"
    },
    {
        "inputs":  "0001100000",
        "expected":  "01001"
    },
    {
        "inputs":  "0001100001",
        "expected":  "10000"
    },
    {
        "inputs":  "0001100010",
        "expected":  "01001"
    },
    {
        "inputs":  "0001100011",
        "expected":  "11001"
    },
    {
        "inputs":  "0001100100",
        "expected":  "01001"
    },
    {
        "inputs":  "0001100101",
        "expected":  "10001"
    },
    {
        "inputs":  "0001100110",
        "expected":  "01010"
    },
    {
        "inputs":  "0001100111",
        "expected":  "11000"
    },
    {
        "inputs":  "0001101000",
        "expected":  "01011"
    },
    {
        "inputs":  "0001101001",
        "expected":  "10000"
    },
    {
        "inputs":  "0001101010",
        "expected":  "01011"
    },
    {
        "inputs":  "0001101011",
        "expected":  "10111"
    },
    {
        "inputs":  "0001101100",
        "expected":  "01011"
    },
    {
        "inputs":  "0001101101",
        "expected":  "10001"
    },
    {
        "inputs":  "0001101110",
        "expected":  "01100"
    },
    {
        "inputs":  "0001101111",
        "expected":  "10110"
    },
    {
        "inputs":  "0001110000",
        "expected":  "01101"
    },
    {
        "inputs":  "0001110001",
        "expected":  "10000"
    },
    {
        "inputs":  "0001110010",
        "expected":  "01101"
    },
    {
        "inputs":  "0001110011",
        "expected":  "10101"
    },
    {
        "inputs":  "0001110100",
        "expected":  "01101"
    },
    {
        "inputs":  "0001110101",
        "expected":  "10001"
    },
    {
        "inputs":  "0001110110",
        "expected":  "01110"
    },
    {
        "inputs":  "0001110111",
        "expected":  "10100"
    },
    {
        "inputs":  "0001111000",
        "expected":  "01111"
    },
    {
        "inputs":  "0001111001",
        "expected":  "10000"
    },
    {
        "inputs":  "0001111010",
        "expected":  "01111"
    },
    {
        "inputs":  "0001111011",
        "expected":  "10011"
    },
    {
        "inputs":  "0001111100",
        "expected":  "11111"
    },
    {
        "inputs":  "0001111101",
        "expected":  "10001"
    },
    {
        "inputs":  "0010010111",
        "expected":  "11101"
    },
    {
        "inputs":  "0010011000",
        "expected":  "00110"
    },
    {
        "inputs":  "0011000100",
        "expected":  "00011"
    },
    {
        "inputs":  "0011000101",
        "expected":  "00001"
    },
    {
        "inputs":  "0011000110",
        "expected":  "00100"
    },
    {
        "inputs":  "0011000111",
        "expected":  "00010"
    },
    {
        "inputs":  "0011001000",
        "expected":  "00011"
    },
    {
        "inputs":  "0011001001",
        "expected":  "00010"
    },
    {
        "inputs":  "0011001010",
        "expected":  "00101"
    },
    {
        "inputs":  "0011001011",
        "expected":  "00001"
    },
    {
        "inputs":  "0011001100",
        "expected":  "00011"
    },
    {
        "inputs":  "0011001101",
        "expected":  "00011"
    },
    {
        "inputs":  "0011001110",
        "expected":  "00110"
    },
    {
        "inputs":  "0011001111",
        "expected":  "00000"
    },
    {
        "inputs":  "0011010000",
        "expected":  "00111"
    },
    {
        "inputs":  "0011010001",
        "expected":  "10000"
    },
    {
        "inputs":  "0011010010",
        "expected":  "00111"
    },
    {
        "inputs":  "0011010011",
        "expected":  "11111"
    },
    {
        "inputs":  "0011010100",
        "expected":  "00111"
    },
    {
        "inputs":  "0011010101",
        "expected":  "10001"
    },
    {
        "inputs":  "0011010110",
        "expected":  "01000"
    },
    {
        "inputs":  "0011010111",
        "expected":  "11110"
    },
    {
        "inputs":  "0011011000",
        "expected":  "00111"
    },
    {
        "inputs":  "0011011001",
        "expected":  "10010"
    },
    {
        "inputs":  "0011011010",
        "expected":  "01001"
    },
    {
        "inputs":  "0011011011",
        "expected":  "11101"
    },
    {
        "inputs":  "0011011100",
        "expected":  "00111"
    },
    {
        "inputs":  "0011011101",
        "expected":  "10011"
    },
    {
        "inputs":  "0011011110",
        "expected":  "01010"
    },
    {
        "inputs":  "0011011111",
        "expected":  "11100"
    },
    {
        "inputs":  "0011100000",
        "expected":  "01011"
    },
    {
        "inputs":  "0011100001",
        "expected":  "10000"
    },
    {
        "inputs":  "0011100010",
        "expected":  "01011"
    },
    {
        "inputs":  "0011100011",
        "expected":  "11011"
    },
    {
        "inputs":  "0011100100",
        "expected":  "01011"
    },
    {
        "inputs":  "0011100101",
        "expected":  "10001"
    },
    {
        "inputs":  "0011100110",
        "expected":  "01100"
    },
    {
        "inputs":  "0011100111",
        "expected":  "11010"
    },
    {
        "inputs":  "0011101000",
        "expected":  "01011"
    },
    {
        "inputs":  "0011101001",
        "expected":  "10010"
    },
    {
        "inputs":  "0011101010",
        "expected":  "01101"
    },
    {
        "inputs":  "0011101011",
        "expected":  "11001"
    },
    {
        "inputs":  "0011101100",
        "expected":  "01011"
    },
    {
        "inputs":  "0011101101",
        "expected":  "10011"
    },
    {
        "inputs":  "0011101110",
        "expected":  "01110"
    },
    {
        "inputs":  "0011101111",
        "expected":  "11000"
    },
    {
        "inputs":  "0011110000",
        "expected":  "01111"
    },
    {
        "inputs":  "0011110001",
        "expected":  "10000"
    },
    {
        "inputs":  "0011110010",
        "expected":  "01111"
    },
    {
        "inputs":  "0011110011",
        "expected":  "10111"
    },
    {
        "inputs":  "0011110100",
        "expected":  "11111"
    },
    {
        "inputs":  "0011110101",
        "expected":  "10001"
    },
    {
        "inputs":  "0011110110",
        "expected":  "10000"
    },
    {
        "inputs":  "0011110111",
        "expected":  "10110"
    },
    {
        "inputs":  "0011111000",
        "expected":  "11111"
    },
    {
        "inputs":  "0011111001",
        "expected":  "10010"
    },
    {
        "inputs":  "0011111010",
        "expected":  "10001"
    },
    {
        "inputs":  "0011111011",
        "expected":  "10101"
    },
    {
        "inputs":  "0011111100",
        "expected":  "11111"
    },
    {
        "inputs":  "0011111101",
        "expected":  "10011"
    },
    {
        "inputs":  "0011111110",
        "expected":  "10010"
    },
    {
        "inputs":  "0011111111",
        "expected":  "10100"
    },
    {
        "inputs":  "0100000000",
        "expected":  "00100"
    },
    {
        "inputs":  "0100000001",
        "expected":  "00000"
    },
    {
        "inputs":  "0100000010",
        "expected":  "00100"
    },
    {
        "inputs":  "0100000011",
        "expected":  "00100"
    },
    {
        "inputs":  "0100000100",
        "expected":  "00101"
    },
    {
        "inputs":  "0100000101",
        "expected":  "00000"
    },
    {
        "inputs":  "0100000110",
        "expected":  "00101"
    },
    {
        "inputs":  "0100000111",
        "expected":  "00011"
    },
    {
        "inputs":  "0100001000",
        "expected":  "00110"
    },
    {
        "inputs":  "0100001001",
        "expected":  "00000"
    },
    {
        "inputs":  "0100001010",
        "expected":  "00110"
    },
    {
        "inputs":  "0100001011",
        "expected":  "00010"
    },
    {
        "inputs":  "0100001100",
        "expected":  "00111"
    },
    {
        "inputs":  "0100001101",
        "expected":  "00000"
    },
    {
        "inputs":  "0100001110",
        "expected":  "00111"
    },
    {
        "inputs":  "0100001111",
        "expected":  "00001"
    },
    {
        "inputs":  "0100010000",
        "expected":  "00100"
    },
    {
        "inputs":  "0100010001",
        "expected":  "00100"
    },
    {
        "inputs":  "0100010010",
        "expected":  "01000"
    },
    {
        "inputs":  "0100010011",
        "expected":  "00000"
    },
    {
        "inputs":  "0100010100",
        "expected":  "00101"
    },
    {
        "inputs":  "0100010101",
        "expected":  "10100"
    },
    {
        "inputs":  "0100010110",
        "expected":  "01001"
    },
    {
        "inputs":  "0100010111",
        "expected":  "11111"
    },
    {
        "inputs":  "0100011000",
        "expected":  "00110"
    },
    {
        "inputs":  "0100011001",
        "expected":  "10100"
    },
    {
        "inputs":  "0100011010",
        "expected":  "01010"
    },
    {
        "inputs":  "0100011011",
        "expected":  "11110"
    },
    {
        "inputs":  "0100011100",
        "expected":  "00111"
    },
    {
        "inputs":  "0100011101",
        "expected":  "10100"
    },
    {
        "inputs":  "0100011110",
        "expected":  "01011"
    },
    {
        "inputs":  "0100011111",
        "expected":  "11101"
    },
    {
        "inputs":  "0100100000",
        "expected":  "01100"
    },
    {
        "inputs":  "0100100001",
        "expected":  "10000"
    },
    {
        "inputs":  "0100100010",
        "expected":  "01100"
    },
    {
        "inputs":  "0100100011",
        "expected":  "11100"
    },
    {
        "inputs":  "0100100100",
        "expected":  "01101"
    },
    {
        "inputs":  "0100100101",
        "expected":  "10000"
    },
    {
        "inputs":  "0100100110",
        "expected":  "01101"
    },
    {
        "inputs":  "0100100111",
        "expected":  "11011"
    },
    {
        "inputs":  "0100101000",
        "expected":  "01110"
    },
    {
        "inputs":  "0100101001",
        "expected":  "10000"
    },
    {
        "inputs":  "0100101010",
        "expected":  "01110"
    },
    {
        "inputs":  "0100101011",
        "expected":  "11010"
    },
    {
        "inputs":  "0100101100",
        "expected":  "01111"
    },
    {
        "inputs":  "0100101101",
        "expected":  "10000"
    },
    {
        "inputs":  "0100101110",
        "expected":  "01111"
    },
    {
        "inputs":  "0100101111",
        "expected":  "11001"
    },
    {
        "inputs":  "0100110000",
        "expected":  "11100"
    },
    {
        "inputs":  "0100110001",
        "expected":  "10100"
    },
    {
        "inputs":  "0100110010",
        "expected":  "10000"
    },
    {
        "inputs":  "0100110011",
        "expected":  "11000"
    },
    {
        "inputs":  "0100110100",
        "expected":  "11101"
    },
    {
        "inputs":  "0100110101",
        "expected":  "10100"
    },
    {
        "inputs":  "0100110110",
        "expected":  "10001"
    },
    {
        "inputs":  "0100110111",
        "expected":  "10111"
    },
    {
        "inputs":  "0100111000",
        "expected":  "11110"
    },
    {
        "inputs":  "0100111001",
        "expected":  "10100"
    },
    {
        "inputs":  "0100111010",
        "expected":  "10010"
    },
    {
        "inputs":  "0100111011",
        "expected":  "10110"
    },
    {
        "inputs":  "0100111100",
        "expected":  "11111"
    },
    {
        "inputs":  "0100111101",
        "expected":  "10100"
    },
    {
        "inputs":  "0100111110",
        "expected":  "10011"
    },
    {
        "inputs":  "0100111111",
        "expected":  "10101"
    },
    {
        "inputs":  "0101000000",
        "expected":  "00101"
    },
    {
        "inputs":  "0101000001",
        "expected":  "00000"
    },
    {
        "inputs":  "0101000010",
        "expected":  "00101"
    },
    {
        "inputs":  "0101000011",
        "expected":  "00101"
    },
    {
        "inputs":  "0101000100",
        "expected":  "00101"
    },
    {
        "inputs":  "0101000101",
        "expected":  "00001"
    },
    {
        "inputs":  "0101000110",
        "expected":  "00110"
    },
    {
        "inputs":  "0101000111",
        "expected":  "00100"
    },
    {
        "inputs":  "0101001000",
        "expected":  "00111"
    },
    {
        "inputs":  "0101001001",
        "expected":  "00000"
    },
    {
        "inputs":  "0101001010",
        "expected":  "00111"
    },
    {
        "inputs":  "0101001011",
        "expected":  "00011"
    },
    {
        "inputs":  "0101001100",
        "expected":  "00111"
    },
    {
        "inputs":  "0101001101",
        "expected":  "00001"
    },
    {
        "inputs":  "0101001110",
        "expected":  "01000"
    },
    {
        "inputs":  "0101001111",
        "expected":  "00010"
    },
    {
        "inputs":  "0101010000",
        "expected":  "00101"
    },
    {
        "inputs":  "0101010001",
        "expected":  "00100"
    },
    {
        "inputs":  "0101010010",
        "expected":  "01001"
    },
    {
        "inputs":  "0101010011",
        "expected":  "00001"
    },
    {
        "inputs":  "0101010100",
        "expected":  "00101"
    },
    {
        "inputs":  "0101010101",
        "expected":  "00101"
    },
    {
        "inputs":  "0101010110",
        "expected":  "01010"
    },
    {
        "inputs":  "0101010111",
        "expected":  "00000"
    },
    {
        "inputs":  "0101011000",
        "expected":  "00111"
    },
    {
        "inputs":  "0101011001",
        "expected":  "10100"
    },
    {
        "inputs":  "0101011010",
        "expected":  "01011"
    },
    {
        "inputs":  "0101011011",
        "expected":  "11111"
    },
    {
        "inputs":  "0101011100",
        "expected":  "00111"
    },
    {
        "inputs":  "0101011101",
        "expected":  "10101"
    },
    {
        "inputs":  "0101011110",
        "expected":  "01100"
    },
    {
        "inputs":  "0101011111",
        "expected":  "11110"
    },
    {
        "inputs":  "0101100000",
        "expected":  "01101"
    },
    {
        "inputs":  "0101100001",
        "expected":  "10000"
    },
    {
        "inputs":  "0101100010",
        "expected":  "01101"
    },
    {
        "inputs":  "0101100011",
        "expected":  "11101"
    },
    {
        "inputs":  "0101100100",
        "expected":  "01101"
    },
    {
        "inputs":  "0101100101",
        "expected":  "10001"
    },
    {
        "inputs":  "0101100110",
        "expected":  "01110"
    },
    {
        "inputs":  "0101100111",
        "expected":  "11100"
    },
    {
        "inputs":  "0101101000",
        "expected":  "01111"
    },
    {
        "inputs":  "0101101001",
        "expected":  "10000"
    },
    {
        "inputs":  "0101101010",
        "expected":  "01111"
    },
    {
        "inputs":  "0101101011",
        "expected":  "11011"
    },
    {
        "inputs":  "0101101100",
        "expected":  "11111"
    },
    {
        "inputs":  "0101101101",
        "expected":  "10001"
    },
    {
        "inputs":  "0101101110",
        "expected":  "10000"
    },
    {
        "inputs":  "0101101111",
        "expected":  "11010"
    },
    {
        "inputs":  "0101110000",
        "expected":  "11101"
    },
    {
        "inputs":  "0101110001",
        "expected":  "10100"
    },
    {
        "inputs":  "0101110010",
        "expected":  "10001"
    },
    {
        "inputs":  "0101110011",
        "expected":  "11001"
    },
    {
        "inputs":  "0101110100",
        "expected":  "11101"
    },
    {
        "inputs":  "0101110101",
        "expected":  "10101"
    },
    {
        "inputs":  "0101110110",
        "expected":  "10010"
    },
    {
        "inputs":  "0101110111",
        "expected":  "11000"
    },
    {
        "inputs":  "0101111000",
        "expected":  "11111"
    },
    {
        "inputs":  "0101111001",
        "expected":  "10100"
    },
    {
        "inputs":  "0101111010",
        "expected":  "10011"
    },
    {
        "inputs":  "0101111011",
        "expected":  "10111"
    },
    {
        "inputs":  "0101111100",
        "expected":  "11111"
    },
    {
        "inputs":  "0101111101",
        "expected":  "10101"
    },
    {
        "inputs":  "0101111110",
        "expected":  "10100"
    },
    {
        "inputs":  "0101111111",
        "expected":  "10110"
    },
    {
        "inputs":  "0110000000",
        "expected":  "00110"
    },
    {
        "inputs":  "0110000001",
        "expected":  "00000"
    },
    {
        "inputs":  "0110000010",
        "expected":  "00110"
    },
    {
        "inputs":  "0110000011",
        "expected":  "00110"
    },
    {
        "inputs":  "0110000100",
        "expected":  "00111"
    },
    {
        "inputs":  "0110000101",
        "expected":  "00000"
    },
    {
        "inputs":  "0110000110",
        "expected":  "00111"
    },
    {
        "inputs":  "0110000111",
        "expected":  "00101"
    },
    {
        "inputs":  "0110001000",
        "expected":  "00110"
    },
    {
        "inputs":  "0110001001",
        "expected":  "00010"
    },
    {
        "inputs":  "0110001010",
        "expected":  "01000"
    },
    {
        "inputs":  "0110001011",
        "expected":  "00100"
    },
    {
        "inputs":  "0110001100",
        "expected":  "00111"
    },
    {
        "inputs":  "0110111010",
        "expected":  "10100"
    },
    {
        "inputs":  "0110111011",
        "expected":  "11000"
    },
    {
        "inputs":  "0110111100",
        "expected":  "11111"
    },
    {
        "inputs":  "0110111101",
        "expected":  "10110"
    },
    {
        "inputs":  "0110111110",
        "expected":  "10101"
    },
    {
        "inputs":  "0110111111",
        "expected":  "10111"
    },
    {
        "inputs":  "0111000000",
        "expected":  "00111"
    },
    {
        "inputs":  "0111000001",
        "expected":  "00000"
    },
    {
        "inputs":  "0111000010",
        "expected":  "00111"
    },
    {
        "inputs":  "0111000011",
        "expected":  "00111"
    },
    {
        "inputs":  "0111000100",
        "expected":  "00111"
    },
    {
        "inputs":  "0111000101",
        "expected":  "00001"
    },
    {
        "inputs":  "0111000110",
        "expected":  "01000"
    },
    {
        "inputs":  "0111000111",
        "expected":  "00110"
    },
    {
        "inputs":  "0111001000",
        "expected":  "00111"
    },
    {
        "inputs":  "0111001001",
        "expected":  "00010"
    },
    {
        "inputs":  "0111001010",
        "expected":  "01001"
    },
    {
        "inputs":  "0111001011",
        "expected":  "00101"
    },
    {
        "inputs":  "0111001100",
        "expected":  "00111"
    },
    {
        "inputs":  "0111001101",
        "expected":  "00011"
    },
    {
        "inputs":  "0111001110",
        "expected":  "01010"
    },
    {
        "inputs":  "0111001111",
        "expected":  "00100"
    },
    {
        "inputs":  "0111010000",
        "expected":  "00111"
    },
    {
        "inputs":  "0111010001",
        "expected":  "00100"
    },
    {
        "inputs":  "0111010010",
        "expected":  "01011"
    },
    {
        "inputs":  "0111010011",
        "expected":  "00011"
    },
    {
        "inputs":  "0111010100",
        "expected":  "00111"
    },
    {
        "inputs":  "0111010101",
        "expected":  "00101"
    },
    {
        "inputs":  "0111010110",
        "expected":  "01100"
    },
    {
        "inputs":  "0111010111",
        "expected":  "00010"
    },
    {
        "inputs":  "0111011000",
        "expected":  "00111"
    },
    {
        "inputs":  "0111011001",
        "expected":  "00110"
    },
    {
        "inputs":  "0111011010",
        "expected":  "01101"
    },
    {
        "inputs":  "0111011011",
        "expected":  "00001"
    },
    {
        "inputs":  "0111011100",
        "expected":  "00111"
    },
    {
        "inputs":  "0111011101",
        "expected":  "00111"
    },
    {
        "inputs":  "0111011110",
        "expected":  "01110"
    },
    {
        "inputs":  "0111011111",
        "expected":  "00000"
    },
    {
        "inputs":  "0111100000",
        "expected":  "01111"
    },
    {
        "inputs":  "1001100010",
        "expected":  "10001"
    },
    {
        "inputs":  "1001100011",
        "expected":  "00001"
    },
    {
        "inputs":  "1001100100",
        "expected":  "11001"
    },
    {
        "inputs":  "1001100101",
        "expected":  "01001"
    },
    {
        "inputs":  "1001100110",
        "expected":  "10010"
    },
    {
        "inputs":  "1001100111",
        "expected":  "00000"
    },
    {
        "inputs":  "1001101000",
        "expected":  "11011"
    },
    {
        "inputs":  "1001101001",
        "expected":  "11000"
    },
    {
        "inputs":  "1001101010",
        "expected":  "10011"
    },
    {
        "inputs":  "1001101011",
        "expected":  "11111"
    },
    {
        "inputs":  "1001101100",
        "expected":  "11011"
    },
    {
        "inputs":  "1001101101",
        "expected":  "11001"
    },
    {
        "inputs":  "1111111010",
        "expected":  "11101"
    },
    {
        "inputs":  "1111111111",
        "expected":  "00000"
    }
          ],
          "hints": [
            "Op=00: A AND B",
            "Op=01: A OR B", 
            "Op=10: A + B",
            "Op=11: A - B",
            "Use 4-to-1 MUX to select operation"
          ]
        },
        {
          "id": "lvl.counter4bit.1",
          "chapterId": "ch.sequential",
          "name": "4-bit Counter",
          "description": "Count from 0 to 15 and repeat. Use clock input.",
          "inputCount": 1,
          "outputCount": 4,
          "inputLabels": [
            "CLK"
          ],
          "outputLabels": [
            "Q3",
            "Q2",
            "Q1",
            "Q0"
          ],
          "isSequential": true,
          "clockInputIndex": 0,
          "settleStepsPerVector": 3,
          "testSequences": [
            {
              "name": "Reset and Count",
              "vectors": [
                {
                  "inputs": "0",
                  "expected": "0000",
                  "settleSteps": 1,
                  "isClockEdge": false
                },
                {
                  "inputs": "1",
                  "expected": "0001",
                  "settleSteps": 2,
                  "isClockEdge": true
                },
                {
                  "inputs": "0",
                  "expected": "0001",
                  "settleSteps": 1,
                  "isClockEdge": false
                },
                {
                  "inputs": "1",
                  "expected": "0010",
                  "settleSteps": 2,
                  "isClockEdge": true
                },
                {
                  "inputs": "0",
                  "expected": "0010",
                  "settleSteps": 1,
                  "isClockEdge": false
                },
                {
                  "inputs": "1",
                  "expected": "0011",
                  "settleSteps": 2,
                  "isClockEdge": true
                },
                {
                  "inputs": "0",
                  "expected": "0011",
                  "settleSteps": 1,
                  "isClockEdge": false
                },
                {
                  "inputs": "1",
                  "expected": "0100",
                  "settleSteps": 2,
                  "isClockEdge": true
                },
                {
                  "inputs": "0",
                  "expected": "0100",
                  "settleSteps": 1,
                  "isClockEdge": false
                },
                {
                  "inputs": "1",
                  "expected": "0101",
                  "settleSteps": 2,
                  "isClockEdge": true
                },
                {
                  "inputs": "0",
                  "expected": "0101",
                  "settleSteps": 1,
                  "isClockEdge": false
                },
                {
                  "inputs": "1",
                  "expected": "0110",
                  "settleSteps": 2,
                  "isClockEdge": true
                },
                {
                  "inputs": "0",
                  "expected": "0110",
                  "settleSteps": 1,
                  "isClockEdge": false
                },
                {
                  "inputs": "1",
                  "expected": "0111",
                  "settleSteps": 2,
                  "isClockEdge": true
                },
                {
                  "inputs": "0",
                  "expected": "0111",
                  "settleSteps": 1,
                  "isClockEdge": false
                },
                {
                  "inputs": "1",
                  "expected": "1000",
                  "settleSteps": 2,
                  "isClockEdge": true
                },
                {
                  "inputs": "0",
                  "expected": "1000",
                  "settleSteps": 1,
                  "isClockEdge": false
                },
                {
                  "inputs": "1",
                  "expected": "1001",
                  "settleSteps": 2,
                  "isClockEdge": true
                },
                {
                  "inputs": "0",
                  "expected": "1001",
                  "settleSteps": 1,
                  "isClockEdge": false
                },
                {
                  "inputs": "1",
                  "expected": "1010",
                  "settleSteps": 2,
                  "isClockEdge": true
                },
                {
                  "inputs": "0",
                  "expected": "1010",
                  "settleSteps": 1,
                  "isClockEdge": false
                },
                {
                  "inputs": "1",
                  "expected": "1011",
                  "settleSteps": 2,
                  "isClockEdge": true
                },
                {
                  "inputs": "0",
                  "expected": "1011",
                  "settleSteps": 1,
                  "isClockEdge": false
                },
                {
                  "inputs": "1",
                  "expected": "1100",
                  "settleSteps": 2,
                  "isClockEdge": true
                },
                {
                  "inputs": "0",
                  "expected": "1100",
                  "settleSteps": 1,
                  "isClockEdge": false
                },
                {
                  "inputs": "1",
                  "expected": "1101",
                  "settleSteps": 2,
                  "isClockEdge": true
                },
                {
                  "inputs": "0",
                  "expected": "1101",
                  "settleSteps": 1,
                  "isClockEdge": false
                },
                {
                  "inputs": "1",
                  "expected": "1110",
                  "settleSteps": 2,
                  "isClockEdge": true
                },
                {
                  "inputs": "0",
                  "expected": "1110",
                  "settleSteps": 1,
                  "isClockEdge": false
                },
                {
                  "inputs": "1",
                  "expected": "1111",
                  "settleSteps": 2,
                  "isClockEdge": true
                },
                {
                  "inputs": "0",
                  "expected": "1111",
                  "settleSteps": 1,
                  "isClockEdge": false
                },
                {
                  "inputs": "1",
                  "expected": "0000",
                  "settleSteps": 2,
                  "isClockEdge": true
                }
              ]
            }
          ],
          "hints": [
            "Use D flip-flops for each bit",
            "Q0 toggles every clock",
            "Q1 toggles when Q0=1",
            "Q2 toggles when Q0=1 and Q1=1",
            "Q3 toggles when Q0=1, Q1=1, and Q2=1"
          ]
        }
      ]
    },
    {
      "chapterId": "ch.coming-soon",
      "chapterName": "Coming Soon",
      "chapterDescription": "More exciting challenges are on the way! I am working on additional levels to expand your digital logic journey. Check back soon for new circuits to design, more complex challenges, and fresh ways to test your skills. Your adventure in logic design is just beginning!\n\nIf you wanna give feedback, have ideas for more levels or have a bug to report, reach out to @Carpen# on discord (discord link available in about menu).",
      "levels": []
    }
  ]
}
